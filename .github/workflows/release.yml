name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.3'

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binaries
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for all platforms
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse --short HEAD)" -o dist/terraform-plan-visualizer-windows-arm64.exe .

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Terraform Plan Visualizer ${{ steps.version.outputs.version }}
          
          ### Downloads
          
          **Linux:**
          - [terraform-plan-visualizer-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-linux-amd64)
          - [terraform-plan-visualizer-linux-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-linux-arm64)
          
          **macOS:**
          - [terraform-plan-visualizer-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-darwin-amd64)
          - [terraform-plan-visualizer-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-darwin-arm64)
          
          **Windows:**
          - [terraform-plan-visualizer-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-windows-amd64.exe)
          - [terraform-plan-visualizer-windows-arm64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-windows-arm64.exe)
          
          ### Installation
          
          ```bash
          # Download and install (Linux/macOS)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/terraform-plan-visualizer-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m) -o terraform-plan-visualizer
          chmod +x terraform-plan-visualizer
          
          # Or using Go
          go install github.com/${{ github.repository }}@${{ steps.version.outputs.version }}
          ```
          
          ### Usage
          
          ```bash
          # Generate a Terraform plan JSON
          terraform plan -out=plan.tfplan
          terraform show -json plan.tfplan > plan.json
          
          # Generate visualization
          terraform-plan-visualizer -i plan.json -o visualization.html
          ```
          
          ### Docker
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker run --rm -v $(pwd):/workspace ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} -i /workspace/plan.json -o /workspace/visualization.html
          ```
          
          ### Checksums
          
          <details>
          <summary>SHA256 Checksums</summary>
          
          See the attached checksums.txt file for SHA256 checksums of all binaries.
          
          </details>
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

